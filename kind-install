what is KIND?
Kind, short for Kubernetes in Docker, allows you to create and manage local Kubernetes clusters using Docker containers as nodes.
This simplifies local development and testing by enabling you to simulate multi-node Kubernetes environments on your machine.

kubernetes Multi-node clusters using KIND
========================================
Since Kind relies on Docker, we first need to ensure Docker is installed on our system. 
docker version

install kind binary
[ $(uname -m) = x86_64 ] && curl -Lo ./kind https://kind.sigs.k8s.io/dl/v0.29.0/kind-linux-amd64
chmod +x ./kind
mv ./kind /usr/local/bin/kind

kind version

default- pick latest images
---
kind: Cluster
apiVersion: kind.x-k8s.io/v1alpha4
nodes:
- role: control-plane

- role: worker
- role: worker


kind create cluster --config kind.yml 
kind get clusters
kind
kind-2
kubectl taint nodes c2-control-plane node-role.kubernetes.io/control-plane:NoSchedule-
k describe no kind-c2-control-plane|grep -i taint
k label node c2-worker node-role.kubernetes.io/worker=worker

In order to interact with a specific cluster, you only need to specify the cluster name as a context in kubectl:

kubectl cluster-info --context kind-c2
kubectl cluster-info --context kind-kind-2

app
deploy the nginx web server 
kubectl create ns dev
kubectl -n dev create deployment nginx --image=nginx
kubectl -n dev expose deployment nginx --port 80 
k get all -n dev


cleanup
kind delete cluster --name dev

Hostpath storage and use below yaml to create kind cluster
mkdir /opt/kind-volume
chmod 777 /opt/kind-volume
=========== kind sample for kubernetes version 1.32.5==================
cat kind-ingress.yaml
kind: Cluster
apiVersion: kind.x-k8s.io/v1alpha4
name: c2
networking:
  apiServerAddress: "192.168.56.40"
  apiServerPort: 6443
nodes:
- role: control-plane
  image: kindest/node:v1.32.5@sha256:e3b2327e3a5ab8c76f5ece68936e4cafaa82edf58486b769727ab0b3b97a5b0d
  kubeadmConfigPatches:
   - |
      kind: InitConfiguration
      nodeRegistration:
       kubeletExtraArgs:
         node-labels: "ingress-ready=true"
  extraPortMappings:
      - containerPort: 30000
        hostPort: 30000
        protocol: TCP
      - containerPort: 30001
        hostPort: 30001
        protocol: TCP
      - containerPort: 30002
        hostPort: 30002
        protocol: TCP
      - containerPort: 30003
        hostPort: 30003
        protocol: TCP
      - containerPort: 30004
        hostPort: 30004
        protocol: TCP
      - containerPort: 30005
        hostPort: 30005
        protocol: TCP
      - containerPort: 31000
        hostPort: 31000
        protocol: TCP
      - containerPort: 32000
        hostPort: 32000
        protocol: TCP
      - containerPort: 80
        hostPort: 80
        protocol: TCP
      - containerPort: 8080
        hostPort: 8080
        protocol: TCP
- role: worker
  image: kindest/node:v1.32.5@sha256:e3b2327e3a5ab8c76f5ece68936e4cafaa82edf58486b769727ab0b3b97a5b0d
  extraMounts:
  - hostPath: /opt/kind-volume
    containerPath: /kind-volume
- role: worker
  image: kindest/node:v1.32.5@sha256:e3b2327e3a5ab8c76f5ece68936e4cafaa82edf58486b769727ab0b3b97a5b0d
====================

MinIO S3 object storage with TLS
================================= 
What Is Minio Storage?
Minio is an open-source distributed object storage server written in Go lang.
designed for private cloud infrastructure and provides S3 storage functionality. 

object storage->  storing unstructured data such as photos, videos, log files, backups, and containers

S3 API Compatibility
MinIOâ€™s S3 implementation is the most widely tested and implemented alternative to AWS S3 in the world.
Cloud-native applications use the S3 API to communicate with object storage

MinIO Server
MinIO Client [mc]
port 9000 ->is used for connecting to the API,
port 90001-> web browser to access the MinIO Console

Minio S3 Deployment
====================
TLS [selfsigned crt and key]
openssl req -x509 -nodes -days 365 \
    -subj "/C=IN/ST=Mumbai/L=Mumbai/O=example/OU=dev/CN=minio.example" \
    -newkey rsa:4096 -keyout selfsigned-ui.key \
    -out selfsigned-ui.crt

ingress
minio.example
[console]
admin
password123
================== UI - Console
1. kubectl create secret tls minio-ui-tls --namespace dev --cert=selfsigned-ui.crt --key=selfsigned-ui.key
2. 
cat minio-pvc.yaml
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: minio-pvc
spec:
  storageClassName: local-path
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi
3. 
cat minio-svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: minio-svc
spec:
  selector:
    app: minio
  ports:
  - name: http
    port: 9000
    targetPort: 9000
  - name: console
    port: 9001
    targetPort: 9001
  type: ClusterIP
4. 
 cat minio-dep.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: minio
  labels:
    app: minio
spec:
  replicas: 1
  selector:
    matchLabels:
      app: minio
  template:
    metadata:
      labels:
        app: minio
    spec:
      containers:
        - name: minio-server
          image: quay.io/minio/minio:RELEASE.2025-04-22T22-12-26Z
          ports:
          - containerPort: 9000
            hostPort: 9000
          - containerPort: 9001
            hostPort: 9001
          env:
            - name: MINIO_ROOT_USER
              value: admin
            - name: MINIO_ROOT_PASSWORD
              value: password123
          command:
            - /bin/bash
            - -c
          args:
              - minio server /data --console-address :9001
          volumeMounts:
            - mountPath: /data
              name: data
          resources:
            limits:
              cpu: 200m
              memory: 512Mi
            requests:
              cpu: 100m
              memory: 256Mi
          readinessProbe:
            httpGet:
              path: /minio/health/ready
              port: 9000
          livenessProbe:
            httpGet:
              path: /minio/health/live
              port: 9000
      volumes:
        - name: data
          persistentVolumeClaim:
            claimName: minio-pvc
5. 
cat minio-console-ingress.yaml
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: minio-console-ingress
  annotations:
    nginx.ingress.kubernetes.io/backend-protocol: "HTTP"
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
spec:
  ingressClassName: nginx
  rules:
  - host: minio.example
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: minio-svc
            port:
              number: 9001
  tls:
  - hosts:
    - minio.example
    secretName: minio-ui-tls
6.
kubectl -n dev apply -f minio-pvc.yaml -f minio-dep.yaml -f minio-svc.yaml -f minio-console-ingress.yaml
7.
==
make windows host entry -- EXTERNAL-IP,  ingress HOSTS name above 
C:\Windows\System32\drivers\etc\hosts
192.168.56.230  minio.example

# windows browser https://minio.example
[console cred]
admin
password123
8. [cleanup, if required]
kubectl -n dev delete -f minio-svc.yaml -f minio-api-ingress.yaml -f minio-console-ingress.yaml -f minio-dep.yaml -f minio-pvc.yaml

========================================================Minio CLIENT //  MinIO Client mc commands, with Demo
MinIO Server
MinIO Client [mc]
port 9000 ->is used for connecting to the API,
port 90001-> web browser to access the MinIO Console

openssl req -x509 -nodes -days 365 \
    -subj "/C=IN/ST=Mumbai/L=Mumbai/O=example/OU=dev/CN=minioapi.example" \
    -newkey rsa:4096 -keyout selfsigned.key \
    -out selfsigned.crt

kubectl create secret tls minio-tls --namespace dev --cert=selfsigned.crt --key=selfsigned.key
kubectl -n dev apply  -f minio-console-ingress.yaml
	
wget https://dl.min.io/client/mc/release/linux-amd64/mc
chmod +x mc
mv mc /usr/local/bin/
mc alias set myminio https://minio.example oPz4qq5Ea3PEP2usGram Dl7O7Kp4CLqxapGSydQHvQAzF3XoLCG3rB4IA2ff  --insecure 

--insecure to skip TLS certificate verification (not recommended for production)

vi ~/.bashrc
export MC_INSECURE=true

source ~/.bashrc

mc ls myminio
[2025-06-08 09:38:05 UTC]     0B images/
mc ls myminio/images
mc cp minio-pvc.yaml  myminio/images

mc rm myminio/images/minio-pvc.yaml

--
cleanup
kubectl -n dev delete -f minio-svc.yaml -f minio-api-ingress.yaml -f minio-console-ingress.yaml -f minio-dep.yaml -f minio-pvc.yaml
k -n dev delete secret minio-tls minio-ui-tls minio-tls

[console]
admin
password123
